#include <iostream> // Подключаем библиотеку для работы с вводом/выводом
using namespace std;

int main() {
  int m, n; // Переменные для хранения количества строк (m) и столбцов (n)
  cout << "Input m: "; // Запрашиваем у пользователя количество строк
  cin >> m;            // Считываем количество строк
  cout << "Input n: "; // Запрашиваем у пользователя количество столбцов
  cin >> n;            // Считываем количество столбцов

  // Создаем двумерный массив с динамическим выделением памяти
  int **arr = new int *[m]; // Создаем массив указателей для строк
  for (int i = 0; i < m; i++) {
    arr[i] = new int[n]; // Для каждой строки выделяем память для n элементов
  }

  // Ввод элементов массива
  cout << "Input the elements of the array: "
       << endl;                   // Уведомляем пользователя о вводе
  for (int i = 0; i < m; i++) {   // Цикл по строкам
    for (int j = 0; j < n; j++) { // Цикл по столбцам
      cout << "Row[" << i << "], Column[" << j
           << "] = ";   // Указываем текущую позицию элемента
      cin >> arr[i][j]; // Считываем значение элемента
      if (!cin) {       // Проверяем корректность ввода
        cout << "Invalid input. Exiting program."
             << endl; // Если ввод некорректен, выводим сообщение
        // Освобождаем ранее выделенную память
        for (int k = 0; k < i; k++) {
          delete[] arr[k]; // Удаляем каждую строку, если произошла ошибка
        }
        delete[] arr; // Удаляем массив указателей
        return 1;     // Завершаем выполнение программы с кодом ошибки
      }
    }
  }

  bool found = false; // Флаг для проверки, найдена ли седловая точка

  // Поиск седловой точки
  for (int i = 0; i < m; i++) { // Цикл по строкам
    int minIdx = 0; // Инициализируем индекс минимального элемента в строке
    for (int j = 1; j < n;
         j++) { // Поиск минимального элемента в текущей строке
      if (arr[i][j] < arr[i][minIdx]) {
        minIdx = j; // Обновляем индекс минимального элемента
      }
    }

    bool isSaddlePoint =
        true; // Предполагаем, что текущий элемент — седловая точка
    for (int k = 0; k < m;
         k++) { // Проверяем столбец, в котором находится минимальный элемент
      if (arr[k][minIdx] >
          arr[i][minIdx]) {    // Если есть элемент больше текущего
        isSaddlePoint = false; // Текущий элемент не является седловой точкой
        break;                 // Выходим из цикла проверки
      }
    }

    if (isSaddlePoint) { // Если нашли седловую точку
      cout << "Saddle point found: row " << i + 1 << ", column " << minIdx + 1
           << endl; // Выводим ее координаты
      found = true; // Устанавливаем флаг, что седловая точка найдена
      break;        // Завершаем поиск
    }
  }

  if (!found) {        // Если флаг остался false, то седловая точка не найдена
    cout << 0 << endl; // Выводим 0
  }

  // Освобождаем выделенную память
  for (int i = 0; i < m; i++) {
    delete[] arr[i]; // Удаляем каждую строку
  }
  delete[] arr; // Удаляем массив указателей

  return 0; // Завершаем выполнение программы
}
